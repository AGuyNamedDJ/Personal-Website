{"v":"5.12.1","fr":30,"ip":0,"op":100,"w":1920,"h":1080,"nm":"BOOK","ddd":0,"assets":[{"id":"comp_0","nm":"Pages","fr":30,"layers":[{"ddd":0,"ind":1,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,540,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"t":28,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":13,"st":18,"bm":0},{"ddd":0,"ind":2,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,543.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":2,"s":[0]},{"t":30,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":15,"st":18,"bm":0},{"ddd":0,"ind":3,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,546.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":4,"s":[0]},{"t":32,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":17,"st":18,"bm":0},{"ddd":0,"ind":4,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,550,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":6,"s":[0]},{"t":34,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":19,"st":18,"bm":0},{"ddd":0,"ind":5,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,553.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":8,"s":[0]},{"t":36,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":21,"st":18,"bm":0},{"ddd":0,"ind":6,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,556.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":10,"s":[0]},{"t":38,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":23,"st":18,"bm":0},{"ddd":0,"ind":7,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,560,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":12,"s":[0]},{"t":40,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":25,"st":18,"bm":0},{"ddd":0,"ind":8,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,563.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":14,"s":[0]},{"t":42,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":27,"st":18,"bm":0},{"ddd":0,"ind":9,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,566.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":16,"s":[0]},{"t":44,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":29,"st":18,"bm":0},{"ddd":0,"ind":10,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,570,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":18,"s":[0]},{"t":46,"s":[0.906],"h":1},{"t":618,"s":[20],"h":1}],"ix":2},"w":1920,"h":1080,"ip":-20,"op":31,"st":18,"bm":0},{"ddd":0,"ind":11,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,540,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":18,"s":[0]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":44,"s":[0.906]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":31,"op":45,"st":18,"bm":0},{"ddd":0,"ind":12,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,543.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":16,"s":[0]},{"t":44,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":29,"op":45,"st":18,"bm":0},{"ddd":0,"ind":13,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,546.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":14,"s":[0]},{"t":42,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":27,"op":45,"st":18,"bm":0},{"ddd":0,"ind":14,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,550,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":12,"s":[0]},{"t":40,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":25,"op":45,"st":18,"bm":0},{"ddd":0,"ind":15,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,553.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":10,"s":[0]},{"t":38,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":23,"op":45,"st":18,"bm":0},{"ddd":0,"ind":16,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,556.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":8,"s":[0]},{"t":36,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":21,"op":45,"st":18,"bm":0},{"ddd":0,"ind":17,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,560,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":6,"s":[0]},{"t":34,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":19,"op":45,"st":18,"bm":0},{"ddd":0,"ind":18,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,563.333,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":4,"s":[0]},{"t":32,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":17,"op":45,"st":18,"bm":0},{"ddd":0,"ind":19,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,566.667,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":2,"s":[0]},{"t":30,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":15,"op":45,"st":18,"bm":0},{"ddd":0,"ind":20,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,570,0],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"tm":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"t":28,"s":[0.906],"h":1},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":45,"s":[1.567]},{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":90,"s":[3.014]},{"t":618,"s":[20]}],"ix":2},"w":1920,"h":1080,"ip":13,"op":45,"st":18,"bm":0},{"ddd":0,"ind":21,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,540,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,545.598,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[960,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":22,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,543.333,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,548.375,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[963.333,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":23,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,546.667,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,551.152,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[966.667,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":24,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,550,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,553.929,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[970,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":25,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,553.333,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,556.707,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[973.333,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":26,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,556.667,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,559.484,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[976.667,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":27,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,560,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,562.261,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[980,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":28,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,563.333,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,565.038,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[983.333,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":29,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,566.667,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,567.816,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[986.667,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0},{"ddd":0,"ind":30,"ty":0,"nm":"Page preComp 2","refId":"comp_1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[960,570,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[966.199,570.593,0],"to":[0,0,0],"ti":[0,0,0]},{"t":65,"s":[990,551.185,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"w":1920,"h":1080,"ip":45,"op":98,"st":0,"bm":0}]},{"id":"comp_1","nm":"Page preComp 2","fr":30,"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Page1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[836,606.5,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":453,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,162,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":0,"k":0,"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":0,"k":0,"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":0,"k":0,"ix":14,"x":"var $bm_rt;\n$bm_rt = comp('BOOK').layer('Book Cover').effect('Extrudalizer')('X Rotation');"}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":0,"k":0,"ix":15,"x":"var $bm_rt;\n$bm_rt = comp('BOOK').layer('Book Cover').effect('Extrudalizer')('Y Rotation');"}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":0,"k":0,"ix":16,"x":"var $bm_rt;\n$bm_rt = comp('BOOK').layer('Book Cover').effect('Extrudalizer')('Z Rotation');"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":1,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0.194545611739,0.071697220206,0.013116196729,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":0,"k":0.5,"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[1,0.78431372549,0,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0,0.235294117647,1,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":0,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":100,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[-205,-154.34],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[-205,-154.34],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.23137254902,0.529411764706,0.192156862745,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":25,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[0,0,0,1],"ix":51}},{"ty":7,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":100,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":0,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[0],\n        front_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[2],\n        front_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[4],\n        front_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[6],\n        front_bb[7]\n    ];\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":0,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[0],\n        back_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[2],\n        back_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[4],\n        back_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[6],\n        back_bb[7]\n    ];\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"t":0,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-103.803,130.396],[-202.557,130.333],[-285.541,130.312],[-355.284,130.335],[-396.854,130.399],[-409,130.5]],"c":false}],"h":1},{"t":1,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-103.708,130.046],[-202.404,129.77],[-285.369,129.682],[-355.133,129.781],[-396.761,130.06],[-409,130.5]],"c":false}],"h":1},{"t":2,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-103.39,128.891],[-201.894,127.911],[-284.797,127.596],[-354.629,127.947],[-396.454,128.939],[-409,130.5]],"c":false}],"h":1},{"t":3,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-102.783,126.712],[-200.917,124.406],[-283.701,123.665],[-353.666,124.491],[-395.865,126.826],[-409,130.5]],"c":false}],"h":1},{"t":4,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-101.771,123.176],[-199.288,118.717],[-281.874,117.285],[-352.06,118.882],[-394.882,123.395],[-409,130.5]],"c":false}],"h":1},{"t":5,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-100.169,117.825],[-196.711,110.108],[-278.984,107.629],[-349.519,110.394],[-393.328,118.205],[-409,130.5]],"c":false}],"h":1},{"t":6,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-97.654,110.001],[-192.664,97.52],[-274.445,93.511],[-345.529,97.983],[-390.888,110.615],[-409,130.5]],"c":false}],"h":1},{"t":7,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-93.65,98.921],[-186.223,79.694],[-267.222,73.518],[-339.179,80.406],[-387.005,99.866],[-409,130.5]],"c":false}],"h":1},{"t":8,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-87.366,83.993],[-176.458,54.89],[-256.838,44.406],[-331.065,52.504],[-383.792,78.825],[-412.982,121.439]],"c":false}],"h":1},{"t":9,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-77.294,66.769],[-160.498,23.935],[-239.336,4.362],[-316.392,7.786],[-376.047,35.091],[-415.779,84.118]],"c":false}],"h":1},{"t":10,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-60.134,54.677],[-128.91,-1.91],[-197.376,-35.114],[-267.832,-45.656],[-326.247,-29.868],[-369.992,10.607]],"c":false}],"h":1},{"t":11,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-39.984,56.475],[-83.534,-7.11],[-125.216,-54.23],[-166.402,-86.194],[-198.775,-95.538],[-220.948,-82.493]],"c":false}],"h":1},{"t":12,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-22.548,63.572],[-35.686,-1.105],[-39.056,-56.38],[-32.605,-103.957],[-16.959,-133.74],[6.786,-144.759]],"c":false}],"h":1},{"t":13,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-9.982,72.572],[0.268,13.687],[27.104,-39.277],[71.71,-88.003],[126.331,-122.403],[187.838,-141.159]],"c":false}],"h":1},{"t":14,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[-1.783,81.914],[23.207,32.472],[68.831,-12.044],[136.975,-53.052],[215.476,-82.064],[299.965,-97.965]],"c":false}],"h":1},{"t":15,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[3.357,90.639],[36.731,51.396],[92.625,17.2],[173.302,-13.013],[264.233,-32.897],[360.414,-41.754]],"c":false}],"h":1},{"t":16,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[6.548,98.205],[44.348,68.022],[105.241,43.159],[191.672,22.868],[288.005,11.542],[388.968,9.481]],"c":false}],"h":1},{"t":17,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[8.614,104.524],[48.765,81.682],[111.992,64.213],[200.816,51.621],[299.124,46.77],[401.557,49.667]],"c":false}],"h":1},{"t":18,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[10.023,109.733],[51.495,92.627],[115.813,80.7],[205.533,73.637],[304.347,73.191],[406.883,79.177]],"c":false}],"h":1},{"t":19,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[11.021,114.003],[53.284,101.285],[118.122,93.345],[208.101,89.995],[306.844,92.224],[408.994,99.741]],"c":false}],"h":1},{"t":20,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[11.744,117.477],[54.512,108.027],[119.605,102.797],[209.594,101.685],[308.085,105.194],[409.74,112.999]],"c":false}],"h":1},{"t":21,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[12.269,120.267],[55.376,113.144],[120.605,109.571],[210.529,109.486],[308.753,113.145],[409.958,120.242]],"c":false}],"h":1},{"t":22,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[12.648,122.469],[55.989,116.883],[121.298,114.086],[211.15,114.031],[309.151,116.916],[410,122.5]],"c":false}],"h":1},{"t":23,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[12.914,124.233],[56.418,119.722],[121.779,117.271],[211.573,116.83],[309.409,118.628],[410,122.5]],"c":false}],"h":1},{"t":24,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.095,125.684],[56.708,122.057],[122.105,119.889],[211.859,119.132],[309.584,120.036],[410,122.5]],"c":false}],"h":1},{"t":25,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.209,126.852],[56.893,123.935],[122.312,121.995],[212.041,120.984],[309.696,121.168],[410,122.5]],"c":false}],"h":1},{"t":26,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.277,127.762],[57.001,125.399],[122.434,123.638],[212.148,122.428],[309.761,122.051],[410,122.5]],"c":false}],"h":1},{"t":27,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.313,128.438],[57.059,126.487],[122.498,124.858],[212.205,123.501],[309.796,122.707],[410,122.5]],"c":false}],"h":1},{"t":28,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.329,128.902],[57.085,127.234],[122.528,125.696],[212.23,124.237],[309.812,123.157],[410,122.5]],"c":false}],"h":1},{"t":29,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.335,129.168],[57.095,127.661],[122.539,126.175],[212.24,124.658],[309.818,123.415],[410,122.5]],"c":false}],"h":1},{"t":30,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,130.5],[13.336,129.252],[57.097,127.797],[122.541,126.326],[212.242,124.792],[309.819,123.496],[410,122.5]],"c":false}],"h":1}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[0.898010253906,0.576446533203,0.450958251953,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":10,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0.370048552868,0.627961162492,0.769999964097,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5},"e":{"a":0,"k":[100,0],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Front color').value;"},"o":{"a":0,"k":0,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"rd","nm":"Round Corners 1","r":{"a":0,"k":20,"ix":1},"ix":4,"mn":"ADBE Vector Filter - RC","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst is_facing_towards_us = extr_data.split(';')[8] === 'true';\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n    ;\n}\n;"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\n;\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Back color').value;"},"o":{"a":0,"k":0,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"rd","nm":"Round Corners 2","r":{"a":0,"k":20,"ix":1},"ix":4,"mn":"ADBE Vector Filter - RC","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 0;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":1,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 1;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 2;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":1,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 3;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 4","np":1,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 4;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 4;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 4 - 5","np":1,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 5;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Page').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 5;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 5 - 6","np":1,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0.001,0.992,0.943,0.883,0.5,0.611,0.547,0.492,1,0.23,0.151,0.102],"ix":9}},"s":{"a":1,"k":[{"t":11,"s":[-294.767,200.67],"h":1},{"t":12,"s":[460.357,-269.968],"h":1},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":46,"s":[460.357,-269.968],"to":[-44.717,-6.303],"ti":[79.246,3.495]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":54,"s":[192.054,-307.788],"to":[-52.534,-2.317],"ti":[43.516,-5.643]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":56,"s":[53.53,-307.104],"to":[-22.127,2.869],"ti":[24.125,-8.284]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":57,"s":[88.678,342.057],"to":[-71.572,24.577],"ti":[0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":60,"s":[88.678,342.057],"to":[0,0],"ti":[0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":64,"s":[398.367,187.902],"to":[0,0],"ti":[0,0]},{"t":79,"s":[527.882,9.61]}],"ix":5},"e":{"a":1,"k":[{"t":11,"s":[131.027,-114.498],"h":1},{"t":12,"s":[-67.395,217.116],"h":1},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":46,"s":[-67.395,217.116],"to":[13.177,2.108],"ti":[-21.6,-3.075]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":54,"s":[11.666,229.764],"to":[17.813,2.536],"ti":[-19.951,-11.43]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":56,"s":[45.861,223.455],"to":[4.241,2.43],"ti":[-6.798,-5.819]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":57,"s":[-8.496,-278.256],"to":[38.777,33.192],"ti":[1.072,-0.864]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":60,"s":[-218.362,-167.473],"to":[-1.072,0.864],"ti":[0,-0.013]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":64,"s":[-268.651,41.981],"to":[0,0.013],"ti":[-0.813,0.097]},{"t":79,"s":[-261.028,8.482]}],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":7,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":243,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":5,"nm":"EXTRUDALIZER DATA Page","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,540,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":150,"f":"RNSSanzSC-Bold","t":"","ca":1,"j":0,"tr":40,"lh":180,"ls":0,"fc":[1,1,1]},"t":0}],"x":"var $bm_rt;\nvar dot_, cross_vec, len_vec, arraysEqual, getNormal, get2D_projection, getBoundingBox, getPositionMatrix, getRotationMatrix, getScaleMatrix, getIdentity, translate, rotateX, rotateY, rotateZ, multiplyMatrixVector, multiplyMatrices, multiplyArrayOfMatrices, transformMatrix, make_transform, getPoint, getArea, isClockwise, getCenter, hasNoneZeroValues, angle_between, angle_between_cw, isStraightLine_w_delta, isFacingTowardsUs, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_shape_matrix, compare_sides, stringify;\ndot_ = function (a, b) {\n    if (a.length == 2) {\n        return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n    } else {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    }\n};\ncross_vec = function (a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\narraysEqual = function (arr1, arr2) {\n    for (var i = 0, il = arr1.length; i < il; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\ngetNormal = function (pts) {\n    const dir = cross_vec(sub(pts[1], pts[0]), sub(pts[2], pts[0]));\n    return dir;\n};\nget2D_projection = function (points) {\n    return points.map(v => [\n        v[0],\n        v[1]\n    ]);\n};\ngetBoundingBox = function (points) {\n    const boundingBox = {\n        left: Number.POSITIVE_INFINITY,\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        width: undefined,\n        height: undefined,\n        center: undefined\n    };\n    points.forEach(point => {\n        boundingBox.left = Math.min(boundingBox.left, point[0]);\n        boundingBox.top = Math.min(boundingBox.top, point[1]);\n        boundingBox.right = Math.max(boundingBox.right, point[0]);\n        boundingBox.bottom = Math.max(boundingBox.bottom, point[1]);\n    });\n    boundingBox.width = $bm_sub(boundingBox.right, boundingBox.left);\n    boundingBox.height = $bm_sub(boundingBox.bottom, boundingBox.top);\n    boundingBox.center = [\n        $bm_sum(boundingBox.left, $bm_div(boundingBox.width, 2)),\n        $bm_sum(boundingBox.top, $bm_div(boundingBox.height, 2))\n    ];\n    boundingBox.left_top = [\n        boundingBox.left,\n        boundingBox.top\n    ];\n    boundingBox.left_bottom = [\n        boundingBox.left,\n        boundingBox.bottom\n    ];\n    boundingBox.right_top = [\n        boundingBox.right,\n        boundingBox.top\n    ];\n    boundingBox.right_bottom = [\n        boundingBox.right,\n        boundingBox.bottom\n    ];\n    return boundingBox;\n};\ngetPositionMatrix = function (value) {\n    return translate(getIdentity(), value[0], value[1], $bm_neg(value[2]));\n};\ngetRotationMatrix = function (angles) {\n    const angleX = angles[0];\n    const angleY = angles[1];\n    const angleZ = angles[2];\n    var matrix = getIdentity();\n    matrix = rotateZ(matrix, $bm_div($bm_mul(angleZ, Math.PI), 180));\n    matrix = rotateY(matrix, $bm_div($bm_mul(angleY, Math.PI), 180));\n    matrix = rotateX(matrix, $bm_div($bm_mul(angleX, Math.PI), 180));\n    return matrix;\n};\ngetScaleMatrix = function (sc) {\n    return [\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ngetIdentity = function () {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ntranslate = function (matrix, x, y, z) {\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        x,\n        0,\n        1,\n        0,\n        y,\n        0,\n        0,\n        1,\n        z,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateX = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateY = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        0,\n        sin_th,\n        0,\n        0,\n        1,\n        0,\n        0,\n        $bm_neg(sin_th),\n        0,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateZ = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nmultiplyMatrixVector = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 4; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 4; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 4), j)], vector[j]));\n        }\n    }\n    return result;\n};\nmultiplyMatrices = function (matrixB, matrixA) {\n    let result = new Array(16).fill(0);\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            for (let k = 0; k < 4; k++) {\n                result[$bm_sum($bm_mul(i, 4), j)] = $bm_sum(result[$bm_sum($bm_mul(i, 4), j)], $bm_mul(matrixA[$bm_sum($bm_mul(i, 4), k)], matrixB[$bm_sum($bm_mul(k, 4), j)]));\n            }\n        }\n    }\n    return result;\n};\nmultiplyArrayOfMatrices = function (matrices) {\n    var result = matrices[0];\n    for (var i = 1, il = matrices.length; i < il; i++) {\n        result = multiplyMatrices(result, matrices[i]);\n    }\n    return result;\n};\ntransformMatrix = function (move, sc, pivot, pitch_angles, anch, orbit_angles) {\n    var mat_array = [];\n    if (sc !== 1) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getScaleMatrix(sc),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getScaleMatrix(sc));\n        }\n    }\n    mat_array.push(getPositionMatrix(move));\n    if (!arraysEqual(pitch_angles, [\n            0,\n            0,\n            0\n        ])) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getRotationMatrix(pitch_angles),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getRotationMatrix(pitch_angles));\n        }\n    }\n    if (!arraysEqual(anch, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getPositionMatrix(anch.map(i => -i)));\n    }\n    if (!arraysEqual(orbit_angles, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getRotationMatrix(orbit_angles));\n    }\n    return multiplyArrayOfMatrices(mat_array);\n};\nmake_transform = function (transform_matrix, vector) {\n    if (vector.length == 2) {\n        vector = [\n            ...vector,\n            0,\n            1\n        ];\n    } else if (vector.length == 3) {\n        vector = [\n            ...vector,\n            1\n        ];\n    }\n    var result_vector_4d = multiplyMatrixVector(transform_matrix, vector);\n    return result_vector_4d.slice(0, 3);\n};\ngetPoint = function (p1, cp1, cp2, p2, t) {\n    const x = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[0]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[0])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[0])), $bm_mul(Math.pow(t, 3), p2[0]));\n    const y = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[1]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[1])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[1])), $bm_mul(Math.pow(t, 3), p2[1]));\n    return [\n        x,\n        y\n    ];\n};\ngetArea = function (points) {\n    var area = 0;\n    for (var i = 0, il = points.length; i < il; i++) {\n        var p1 = points[i];\n        var p2 = points[(i + 1) % il];\n        area = $bm_sum(area, $bm_sub($bm_mul(p1[0], p2[1]), $bm_mul(p2[0], p1[1])));\n    }\n    return $bm_div(area, 2);\n};\nisClockwise = function (points) {\n    return getArea(points) > 0;\n};\ngetCenter = function (pts) {\n    var cp = [\n        0,\n        0\n    ];\n    const num_pts = pts.length;\n    for (var i = 0; i < num_pts; i++) {\n        cp = add(cp, pts[i]);\n    }\n    cp = div(cp, num_pts);\n    return cp;\n};\nhasNoneZeroValues = function (array2D) {\n    return array2D.some(array => array.some(value => value !== 0));\n};\nangle_between = function (a, b) {\n    const dot_prod = dot_(a, b);\n    const mag_a = len_vec(a);\n    const mag_b = len_vec(b);\n    const cos_ = $bm_div(dot_prod, $bm_mul(mag_a, mag_b));\n    return cos_;\n};\nangle_between_cw = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    angle = angle >= 0 ? angle : $bm_sum($bm_mul(2, Math.PI), angle);\n    const degrees = $bm_mul(angle, $bm_div(180, Math.PI));\n    return degrees;\n};\nisStraightLine_w_delta = function (cp1, cp2, delta) {\n    return angle_between(cp1, cp2) <= -delta;\n};\nisFacingTowardsUs = function (p1, p2) {\n    return dot_(sub(p2, p1), [\n        0,\n        0,\n        1\n    ]) > 0;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n    ;\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_shape_matrix = function (anchor, pos, scale, rot, skew, skew_axis) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    ;\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    ;\n    if (skew !== 0) {\n        const sk_angle = $bm_div($bm_mul(skew, Math.PI), 180);\n        const Sk = [\n            1,\n            Math.tan(-sk_angle),\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            1\n        ];\n        if (skew_axis !== 0) {\n            const sk_axis_angle = $bm_div($bm_mul(skew_axis, Math.PI), 180);\n            const Rz = [\n                Math.cos(sk_axis_angle),\n                -Math.sin(sk_axis_angle),\n                0,\n                Math.sin(sk_axis_angle),\n                Math.cos(sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const Rz_inv = [\n                Math.cos(-sk_axis_angle),\n                -Math.sin(-sk_axis_angle),\n                0,\n                Math.sin(-sk_axis_angle),\n                Math.cos(-sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const SkM = multiplyArrayOfMatrices3x3([\n                Rz_inv,\n                Sk,\n                Rz\n            ]);\n            mat_array.push(SkM);\n        } else {\n            mat_array.push(Sk);\n        }\n        ;\n    }\n    ;\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const R = [\n            Math.cos(theta),\n            -Math.sin(theta),\n            0,\n            Math.sin(theta),\n            Math.cos(theta),\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    ;\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    ;\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nconst shape_layer = thisComp.layer('Page1');\nconst shape = shape_layer(2)(1);\nconst shape_contents = shape(2);\nconst targetPath = shape_contents(1)(2);\nconst is_path_closed = targetPath.isClosed();\nconst extrudalizer = shape_layer('ADBE Effect Parade')('Pseudo/Extrudalizer');\nconst depth = extrudalizer('Extrusion depth').value;\nlet anchor = extrudalizer('Position').value;\nanchor = [\n    $bm_neg(anchor[0]),\n    anchor[1],\n    anchor[2]\n];\nconst angleX = extrudalizer('X Rotation').value;\nconst angleY = extrudalizer('Y Rotation').value;\nconst angleZ = extrudalizer('Z Rotation').value;\nconst pivot_angleX = extrudalizer('Pitch (x)').value;\nconst pivot_angleY = extrudalizer('Yaw (y)').value;\nconst pivot_angleZ = extrudalizer('Roll (z)').value;\nconst scale_front = $bm_div(extrudalizer('Front scale').value, 100);\nconst scale_back = $bm_div(extrudalizer('Back scale').value, 100);\nconst use_bb_front = extrudalizer('Compute 3D front bounding box').value;\nconst use_bb_back = extrudalizer('Compute 3D back bounding box').value;\nlet pnts = targetPath.points();\nlet inTangents = targetPath.inTangents();\nlet outTangents = targetPath.outTangents();\nconst is_front_clockwise = isClockwise(pnts);\nconst shape_transform = shape.transform;\nconst s_anchor = shape_transform.anchorPoint;\nconst s_pos = shape_transform.position;\nconst s_scale = shape_transform.scale;\nconst s_rot = shape_transform.rotation;\nconst s_skew = shape_transform.skew;\nconst s_skew_axis = shape_transform.skewAxis;\nconst shape_transform_matrix = get_transform_shape_matrix(s_anchor, s_pos, s_scale, s_rot, s_skew, s_skew_axis);\nconst layer_transform = shape_layer.transform;\nconst l_anchor = layer_transform.anchorPoint;\nconst l_pos = layer_transform.position;\nconst l_scale = layer_transform.scale;\nconst l_rot = layer_transform.rotation;\nconst layer_transform_matrix = get_transform_shape_matrix(l_anchor, l_pos, l_scale, l_rot, 0, 0);\nlet subdivs = 1;\nif (hasNoneZeroValues(inTangents) || hasNoneZeroValues(outTangents)) {\n    subdivs = 5;\n    let pointsF = [];\n    const num_pnts = pnts.length;\n    for (var i = 0; i < num_pnts; i++) {\n        var p1 = pnts[i], p2 = pnts[(i + 1) % num_pnts];\n        var out1 = outTangents[i], in2 = inTangents[(i + 1) % num_pnts];\n        var cp1 = add(p1, out1), cp2 = add(p2, in2);\n        pointsF.push(pnts[i]);\n        if (len_vec(out1) !== 0 || len_vec(in2) !== 0) {\n            var a = len_vec(out1) === 0 ? sub(p2, p1) : out1;\n            var b = len_vec(in2) === 0 ? sub(p1, p2) : in2;\n            if (!isStraightLine_w_delta(a, b, 0.98)) {\n                for (var j = 1; j < subdivs; j++) {\n                    var t = $bm_div(j, subdivs);\n                    pointsF.push(getPoint(p1, cp1, cp2, p2, t));\n                }\n            }\n        }\n    }\n    pnts = pointsF;\n}\npnts = pnts.map(p => transform2D_apply(shape_transform_matrix, p));\nconst num_pts = pnts.length;\nconst zero_center_point = getCenter(pnts);\nconst zero_center_point_3D = [\n    ...zero_center_point,\n    0\n];\nconst tr_front_mat = transformMatrix([\n    0,\n    0,\n    $bm_div($bm_neg(depth), 2)\n], scale_front, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst tr_back_mat = transformMatrix([\n    0,\n    0,\n    $bm_div(depth, 2)\n], scale_back, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst z0_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    0\n]);\nconst z1_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    1\n]);\nconst front_facing_towards_us = isFacingTowardsUs(z0_transformed, z1_transformed);\nlet points_front_3D = pnts.map(pnt => make_transform(tr_front_mat, pnt));\nlet points_back_3D = pnts.map(pnt => make_transform(tr_back_mat, pnt));\nlet winding_sides = [];\nlet sorted_sides = [];\nlet num_sides_towards_us = 0;\nfor (var i = 0; i < num_pts; i++) {\n    if (!is_path_closed && i == num_pts - 1) {\n        break;\n    }\n    var F1 = points_front_3D[i], F2 = points_front_3D[(i + 1) % num_pts];\n    var B1 = points_back_3D[i], B2 = points_back_3D[(i + 1) % num_pts];\n    var side_normal = getNormal([\n        F2,\n        F1,\n        B1\n    ]);\n    if (!is_front_clockwise) {\n        side_normal = mul(side_normal, -1);\n    }\n    const sideIsFacingUs = isFacingTowardsUs([\n        0,\n        0,\n        0\n    ], side_normal);\n    if (sideIsFacingUs) {\n        num_sides_towards_us++;\n    }\n    winding_sides.push(sideIsFacingUs);\n    let side_sorted = [\n        F2,\n        F1,\n        B1,\n        B2\n    ];\n    side_sorted.sort((a, b) => b[2] - a[2]);\n    sorted_sides.push([\n        side_sorted,\n        i,\n        $bm_mod($bm_sum(i, 1), num_pts)\n    ]);\n}\ncompare_sides = function (side1, side2) {\n    const s1_vertices_z = side1[0].map(v => v[2]), s2_vertices_z = side2[0].map(v => v[2]);\n    for (var i = 0, il = side1[0].length; i < il; i++) {\n        if (s1_vertices_z[i] != s2_vertices_z[i]) {\n            return $bm_sub(s2_vertices_z[i], s1_vertices_z[i]);\n        }\n    }\n};\nsorted_sides.sort((a, b) => compare_sides(a, b));\nsorted_sides = sorted_sides.map(p => [\n    p[1],\n    p[2]\n]);\nsorted_sides.sort(function (a, b) {\n    const fa = winding_sides[a[0]], fb = winding_sides[b[0]];\n    if (fa && !fb) {\n        return -1;\n    } else if (!fa && fb) {\n        return 1;\n    } else {\n        return 0;\n    }\n    ;\n});\nconst vec_between_front_back = sub(points_front_3D[0], points_back_3D[0]);\nlet bb_front_2D = [], bb_back_2D = [], bb_front_transforms = [], bb_back_transforms = [];\nif (use_bb_back || use_bb_front) {\n    const bb = getBoundingBox(pnts);\n    const AB = sub(bb.right_top, bb.left_top);\n    const AD = sub(bb.left_bottom, bb.left_top);\n    const scaleX_coeff = front_facing_towards_us ? 100 : -100;\n    const scaleY_coeff = 100;\n    if (use_bb_front) {\n        const bb_front_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_front_mat, pnt));\n        bb_front_2D = get2D_projection(bb_front_3D);\n        bb_front_2D.push(add(bb_front_2D[2], sub(bb_front_2D[1], bb_front_2D[0])));\n        const ex_front_left_top = bb_front_2D[0], ex_front_right_top = bb_front_2D[1], ex_front_left_bottom = bb_front_2D[2];\n        const front_bb_anchor = bb.left_top;\n        const front_bb_pos = ex_front_left_top;\n        const ex_front_AB = sub(ex_front_right_top, ex_front_left_top);\n        let front_bb_theta = angle_between_cw(AB, ex_front_AB);\n        if (!front_facing_towards_us) {\n            front_bb_theta = $bm_sub(front_bb_theta, 180);\n        }\n        const front_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_front_AB)), len_vec(AB));\n        const ex_front_AD = sub(ex_front_left_bottom, ex_front_left_top);\n        const front_bb_th_rad = $bm_mul(front_bb_theta, $bm_div(Math.PI, 180));\n        const front_AD_rot = [\n            AD[0] * Math.cos(front_bb_th_rad) - AD[1] * Math.sin(front_bb_th_rad),\n            AD[0] * Math.sin(front_bb_th_rad) + AD[1] * Math.cos(front_bb_th_rad)\n        ];\n        let front_bb_sk = angle_between_cw(front_AD_rot, ex_front_AD);\n        front_bb_sk = front_bb_sk < 90 ? front_bb_sk : $bm_sub(front_bb_sk, 360);\n        const front_sk_rad = $bm_div($bm_mul(front_bb_sk, Math.PI), 180);\n        const front_AD_skew = [\n            AD[0] + Math.tan(-front_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const front_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_front_AD)), len_vec(front_AD_skew));\n        bb_front_transforms = [\n            front_bb_anchor,\n            front_bb_pos,\n            front_bb_theta,\n            [\n                front_bb_scx,\n                front_bb_scy\n            ],\n            front_bb_sk\n        ];\n        bb_front_2D = bb_front_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n    if (use_bb_back) {\n        const bb_back_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_back_mat, pnt));\n        bb_back_2D = get2D_projection(bb_back_3D);\n        bb_back_2D.push(add(bb_back_2D[2], sub(bb_back_2D[1], bb_back_2D[0])));\n        const ex_back_left_top = bb_back_2D[0], ex_back_right_top = bb_back_2D[1], ex_back_left_bottom = bb_back_2D[2];\n        const back_bb_anchor = bb.left_top;\n        const back_bb_pos = ex_back_left_top;\n        const ex_back_AB = sub(ex_back_right_top, ex_back_left_top);\n        let back_bb_theta = $bm_sub(angle_between_cw(AB, ex_back_AB), 180);\n        if (front_facing_towards_us) {\n            back_bb_theta = $bm_sum(back_bb_theta, 180);\n        }\n        const back_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_back_AB)), len_vec(AB));\n        const ex_back_AD = sub(ex_back_left_bottom, ex_back_left_top);\n        const back_bb_th_rad = $bm_mul(back_bb_theta, $bm_div(Math.PI, 180));\n        const back_AD_rot = [\n            AD[0] * Math.cos(back_bb_th_rad) - AD[1] * Math.sin(back_bb_th_rad),\n            AD[0] * Math.sin(back_bb_th_rad) + AD[1] * Math.cos(back_bb_th_rad)\n        ];\n        let back_bb_sk = angle_between_cw(back_AD_rot, ex_back_AD);\n        back_bb_sk = back_bb_sk < 90 ? back_bb_sk : $bm_sub(back_bb_sk, 360);\n        const back_sk_rad = $bm_div($bm_mul(back_bb_sk, Math.PI), 180);\n        const back_AD_skew = [\n            AD[0] + Math.tan(-back_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const back_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_back_AD)), len_vec(back_AD_skew));\n        bb_back_transforms = [\n            back_bb_anchor,\n            back_bb_pos,\n            back_bb_theta,\n            [\n                back_bb_scx,\n                back_bb_scy\n            ],\n            back_bb_sk\n        ];\n        bb_back_2D = bb_back_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n}\nlet grad_property = null;\ntry {\n    grad_property = shape_contents('ADBE Vector Graphic - G-Fill');\n} catch (e) {\n}\n;\nvar grad_start_front_new = '';\nvar grad_end_front_new = '';\nvar grad_start_back_new = '';\nvar grad_end_back_new = '';\nif (grad_property != null) {\n    let grad_start = grad_property.startPoint.value;\n    let grad_end = grad_property.endPoint.value;\n    grad_start = transform2D_apply(shape_transform_matrix, grad_start);\n    grad_end = transform2D_apply(shape_transform_matrix, grad_end);\n    const grad_start_front = make_transform(tr_front_mat, grad_start);\n    const grad_end_front = make_transform(tr_front_mat, grad_end);\n    const grad_start_back = make_transform(tr_back_mat, grad_start);\n    const grad_end_back = make_transform(tr_back_mat, grad_end);\n    grad_start_front_new = grad_start_front;\n    grad_end_front_new = grad_end_front;\n    grad_start_back_new = grad_start_back;\n    grad_end_back_new = grad_end_back;\n    const grad_front_rot = $bm_div($bm_mul(extrudalizer('Front gradient direction').value, Math.PI), 180);\n    const grad_back_rot = $bm_div($bm_mul(extrudalizer('Back gradient direction').value, Math.PI), 180);\n    if (!arraysEqual([\n            grad_front_rot,\n            grad_back_rot\n        ], [\n            0,\n            0\n        ])) {\n        const grad_origin_front = div(add(grad_end_front, grad_start_front), 2);\n        const grad_origin_back = div(add(grad_end_back, grad_start_back), 2);\n        const grad_p_st_front = sub(grad_start_front, grad_origin_front);\n        const grad_p_end_front = sub(grad_end_front, grad_origin_front);\n        const grad_p_st_back = sub(grad_start_back, grad_origin_back);\n        const grad_p_end_back = sub(grad_end_back, grad_origin_back);\n        if (grad_front_rot != 0) {\n            const cos_st = Math.cos(grad_front_rot), sin_st = Math.sin(grad_front_rot);\n            grad_start_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_st_front[0]), $bm_mul(sin_st, grad_p_st_front[1])), grad_origin_front[0]);\n            grad_start_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_st_front[0]), $bm_mul(cos_st, grad_p_st_front[1])), grad_origin_front[1]);\n            grad_end_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_end_front[0]), $bm_mul(sin_st, grad_p_end_front[1])), grad_origin_front[0]);\n            grad_end_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_end_front[0]), $bm_mul(cos_st, grad_p_end_front[1])), grad_origin_front[1]);\n        }\n        if (grad_back_rot != 0) {\n            const cos_st_b = Math.cos(grad_back_rot), sin_st_b = Math.sin(grad_back_rot);\n            grad_start_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_st_back[0]), $bm_mul(sin_st_b, grad_p_st_back[1])), grad_origin_back[0]);\n            grad_start_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_st_back[0]), $bm_mul(cos_st_b, grad_p_st_back[1])), grad_origin_back[1]);\n            grad_end_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_end_back[0]), $bm_mul(sin_st_b, grad_p_end_back[1])), grad_origin_back[0]);\n            grad_end_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_end_back[0]), $bm_mul(cos_st_b, grad_p_end_back[1])), grad_origin_back[1]);\n        }\n    }\n}\nstringify = function (data, separator) {\n    return data.map(item => Array.isArray(item) ? item.join(',') : item.toString()).join(separator);\n};\nconst extr_data = [\n    tr_front_mat,\n    tr_back_mat,\n    shape_transform_matrix,\n    subdivs,\n    is_path_closed,\n    points_front_3D,\n    points_back_3D,\n    sorted_sides,\n    front_facing_towards_us,\n    num_sides_towards_us,\n    vec_between_front_back,\n    bb_front_2D,\n    bb_back_2D,\n    bb_front_transforms,\n    bb_back_transforms,\n    grad_start_front_new,\n    grad_end_front_new,\n    grad_start_back_new,\n    grad_end_back_new\n];\nvar txt = stringify(extr_data, ';');\n$bm_rt = txt;"},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":600,"st":0,"ct":1,"bm":0}]}],"fonts":{"list":[{"origin":0,"fPath":"","fClass":"","fFamily":"","fWeight":"","fStyle":"Bold","fName":"RNSSanzSC-Bold","ascent":49.1989135742188}]},"layers":[{"ddd":0,"ind":1,"ty":3,"nm":"Null 17","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.12],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":40,"s":[0]},{"t":82,"s":[180]}],"ix":10},"p":{"a":0,"k":[836,543,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.0]","cl":"1 0","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[1267.357,559.882,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.1]","cl":"1 1","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[1267.357,578.257,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.2]","cl":"1 2","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[903.982,578.195,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[888.982,578.195,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.3]","cl":"1 3","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[883.42,594.507,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[856.92,594.507,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.4]","cl":"1 4","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[847.482,594.507,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[824.482,574.507,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.5]","cl":"1 5","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[-15.705,51.445,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[12.295,31.445,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.6]","cl":"1 6","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[-54.018,51.445,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[-19.018,51.445,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.7]","cl":"1 7","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[-68.268,35.257,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[-53.268,35.257,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.8]","cl":"1 8","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[-433.018,35.257,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.9]","cl":"1 9","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[-433.018,16.882,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.10]","cl":"1 10","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":0.12},"o":{"x":0.44,"y":0.44},"t":40,"s":[-52.143,16.882,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[-52.143,16.882,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.11]","cl":"1 11","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[-34.893,33.632,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[-19.893,33.632,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.12]","cl":"1 12","parent":1,"hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[-14.268,33.632,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[-4.268,23.632,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.13]","cl":"1 13","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[845.357,576.632,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[840.357,566.632,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":16,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.14]","cl":"1 14","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":1},"o":{"x":0.44,"y":0},"t":40,"s":[869.42,576.632,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[856.92,576.632,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":17,"ty":3,"nm":"Shape Layer 1: Path 1 [1.1.15]","cl":"1 15","hd":true,"sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.12,"y":0.12},"o":{"x":0.44,"y":0.44},"t":40,"s":[888.607,559.882,0],"to":[0,0,0],"ti":[0,0,0]},{"t":82,"s":[888.607,559.882,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":123,"st":0,"bm":0},{"ddd":0,"ind":18,"ty":4,"nm":"Book Corver 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[835.17,577.195,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":508,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,0,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":0,"k":0,"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":0,"k":0,"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":1,"k":[{"i":{"x":[0.12],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[-25]},{"t":89,"s":[90]}],"ix":14}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[25]},{"t":65,"s":[180]}],"ix":15}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":1,"k":[{"i":{"x":[0.12],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[0]},{"t":89,"s":[180]}],"ix":16}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":1,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0,1,0.98431372549,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[0.477340400219,0.263591557741,0,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0.477340400219,0.263591557741,0,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":100,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[0,0],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[0,0],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.23137254902,0.529411764706,0.192156862745,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":25,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[0,0,0,1],"ix":51}},{"ty":7,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":100,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":0,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[0],\n        front_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[2],\n        front_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[4],\n        front_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[6],\n        front_bb[7]\n    ];\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":0,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[0],\n        back_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[2],\n        back_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[4],\n        back_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[6],\n        back_bb[7]\n    ];\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.0]","np":3,"mn":"ADBE Layer Control","ix":2,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":2,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.1]","np":3,"mn":"ADBE Layer Control","ix":3,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":3,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.2]","np":3,"mn":"ADBE Layer Control","ix":4,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":4,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.3]","np":3,"mn":"ADBE Layer Control","ix":5,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":5,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.4]","np":3,"mn":"ADBE Layer Control","ix":6,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":6,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.5]","np":3,"mn":"ADBE Layer Control","ix":7,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":7,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.6]","np":3,"mn":"ADBE Layer Control","ix":8,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":8,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.7]","np":3,"mn":"ADBE Layer Control","ix":9,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":9,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.8]","np":3,"mn":"ADBE Layer Control","ix":10,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":10,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.9]","np":3,"mn":"ADBE Layer Control","ix":11,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":11,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.10]","np":3,"mn":"ADBE Layer Control","ix":12,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":12,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.11]","np":3,"mn":"ADBE Layer Control","ix":13,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":13,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.12]","np":3,"mn":"ADBE Layer Control","ix":14,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":14,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.13]","np":3,"mn":"ADBE Layer Control","ix":15,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":15,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.14]","np":3,"mn":"ADBE Layer Control","ix":16,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":16,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.15]","np":3,"mn":"ADBE Layer Control","ix":17,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":17,"ix":1}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[432.188,-17.312],[432.188,1.062],[68.813,1],[48.25,17.312],[12.312,17.312],[-14.875,17.25],[-53.188,17.25],[-67.438,1.062],[-432.188,1.062],[-432.188,-17.312],[-51.312,-17.312],[-34.062,-0.562],[-13.438,-0.562],[10.188,-0.562],[34.25,-0.562],[53.438,-17.312]],"c":true},"ix":2,"x":"var $bm_rt;\nvar nullLayerNames = [\n    'Shape Layer 1: Path 1 [1.1.0]',\n    'Shape Layer 1: Path 1 [1.1.1]',\n    'Shape Layer 1: Path 1 [1.1.2]',\n    'Shape Layer 1: Path 1 [1.1.3]',\n    'Shape Layer 1: Path 1 [1.1.4]',\n    'Shape Layer 1: Path 1 [1.1.5]',\n    'Shape Layer 1: Path 1 [1.1.6]',\n    'Shape Layer 1: Path 1 [1.1.7]',\n    'Shape Layer 1: Path 1 [1.1.8]',\n    'Shape Layer 1: Path 1 [1.1.9]',\n    'Shape Layer 1: Path 1 [1.1.10]',\n    'Shape Layer 1: Path 1 [1.1.11]',\n    'Shape Layer 1: Path 1 [1.1.12]',\n    'Shape Layer 1: Path 1 [1.1.13]',\n    'Shape Layer 1: Path 1 [1.1.14]',\n    'Shape Layer 1: Path 1 [1.1.15]'\n];\nvar origPath = thisProperty;\nvar origPoints = origPath.points();\nvar origInTang = origPath.inTangents();\nvar origOutTang = origPath.outTangents();\nvar getNullLayers = [];\nfor (var i = 0, il = nullLayerNames.length; i < il; i++) {\n    try {\n        getNullLayers.push(effect(nullLayerNames[i])('ADBE Layer Control-0001'));\n    } catch (err) {\n        getNullLayers.push(null);\n    }\n}\nfor (var i = 0, il = getNullLayers.length; i < il; i++) {\n    if (getNullLayers[i] != null && getNullLayers[i].index != thisLayer.index) {\n        origPoints[i] = fromCompToSurface(getNullLayers[i].toComp(getNullLayers[i].anchorPoint));\n    }\n}\n$bm_rt = createPath(origPoints, origInTang, origOutTang, origPath.isClosed());"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[0.898010253906,0.576446533203,0.450958251953,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":10,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[10,10],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isHidden = effect('Extrudalizer')('Hide anchor point').value;\n$bm_rt = $bm_mul(!isHidden, 100);"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ANCHOR POINT","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Front color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Front opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst is_facing_towards_us = extr_data.split(';')[8] === 'true';\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n    ;\n}\n;"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\n;\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Back color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Back opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    try {\n        const frontOpacity = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity.value;\n        $bm_rt = value = $bm_sub(100, frontOpacity);\n    } catch (e) {\n        $bm_rt = 100;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 0;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 0;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 1;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 1;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 2;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 2;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 3;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 3;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 4","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 4;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 4;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 4;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 4 - 5","np":3,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 5;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 5;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 5;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 5 - 6","np":3,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 6;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 6;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 6;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 6 - 7","np":3,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 7;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 7;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 7;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 7 - 8","np":3,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 8;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 8;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 8;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 8 - 9","np":3,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 9;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 9;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 9;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 9 - 10","np":3,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 10;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 10;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 10;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 10 - 11","np":3,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 11;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 11;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 11;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 11 - 12","np":3,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 12;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 12;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 12;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 12 - 13","np":3,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 13;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 13;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 13;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 13 - 14","np":3,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 14;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 14;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 14;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 14 - 15","np":3,"cix":2,"bm":0,"ix":15,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 15;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 15;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 15;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 15 - 0","np":3,"cix":2,"bm":0,"ix":16,"mn":"ADBE Vector Group","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":16,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":123,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":19,"ty":0,"nm":"Pages","refId":"comp_0","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[956,499,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":57,"s":[954.089,499,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":58,"s":[936.427,499,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":63,"s":[938.455,512,0],"to":[0,0,0],"ti":[0,0,0]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":66,"s":[939.672,520.5,0],"to":[0,0,0],"ti":[0,0,0]},{"t":89,"s":[949,499,0]}],"ix":2,"l":2},"a":{"a":0,"k":[960,540,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"hasMask":true,"masksProperties":[{"inv":false,"mode":"a","pt":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":45,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[0,0],[0,41.576],[0,57.257],[0,71.812],[0,1080],[1.268,1080],[117.277,1080],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":50,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[641,468.375],[705.315,502.278],[729.572,515.065],[752.087,526.934],[951,670.5],[951.64,670.77],[1010.188,695.513],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":51,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[849,446.375],[933.578,568.859],[965.478,615.055],[995.087,657.934],[991,683.5],[991.613,683.762],[1047.745,707.719],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":52,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[969.5,401.875],[1002.261,536.228],[1014.618,586.9],[1026.087,633.934],[1022,659.5],[1022.593,659.778],[1076.851,685.185],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":53,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[1063,397.375],[1060.795,548.4],[1059.964,605.361],[1050.087,638.434],[1055.5,662.5],[1056.071,662.776],[1108.305,688.002],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":54,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[1109,394.375],[1091.183,529.788],[1084.464,580.861],[1075.587,606.934],[1075.5,630.5],[1082.091,664.202],[1132.752,689.341],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":55,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[1116.5,381.375],[1103.04,500.814],[1097.964,545.861],[1093.587,568.184],[1090.75,603.25],[1092.591,646.702],[1142.617,672.899],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":56,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[1134.5,379.375],[1121.04,498.814],[1115.964,543.861],[1111.587,566.184],[1108.75,601.25],[1110.591,644.702],[1159.529,671.02],[1920,1080],[1920,0]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":57,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[545.5,479.375],[532.04,598.813],[526.964,643.861],[522.587,666.184],[519.75,701.25],[521.591,744.702],[500.696,756.268],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":58,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[609.25,637.875],[621.386,680.162],[625.964,696.11],[624.337,706.684],[613.75,701],[525.841,886.951],[504.689,889.917],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":59,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[627.195,696.77],[643.314,724.824],[649.394,735.405],[650.85,756.093],[645.111,752.822],[594.963,952.299],[569.632,951.314],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":60,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[643.092,734.593],[670.353,762.885],[680.635,773.555],[690.772,794.028],[683.351,803.477],[690.494,1009.037],[659.387,1004.621],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":61,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[679.067,777.48],[716.189,798.101],[726.026,807.78],[734.88,825.233],[727.588,835.297],[797.784,1035.488],[760.19,1029.473],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":62,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[707.675,811.067],[743.235,817.384],[764.713,824.21],[783.034,838.751],[779.186,850.394],[911.676,1032.651],[867.196,1026.807],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":63,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[755.102,834.74],[802.472,837.016],[808.655,842.403],[824.987,847.032],[828.417,861.447],[996.998,990.228],[947.359,986.949],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":66,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[755.102,834.74],[816.972,853.141],[851.905,843.653],[884.737,846.532],[901.167,854.697],[1186.748,911.978],[1160.328,987.013],[176,936],[176,-144]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":67,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[755.102,834.74],[816.972,853.141],[851.78,846.278],[884.737,846.532],[901.167,854.697],[1203.248,898.978],[1160.328,987.013],[176,936],[176,-144]],"c":true}]},{"t":68,"s":[{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[688.522,901.66],[750.391,920.06],[785.199,913.198],[818.157,913.451],[834.587,921.617],[1143.667,954.897],[1160.328,987.013],[176,936],[176,-144]],"c":true}]}],"ix":1},"o":{"a":0,"k":100,"ix":3},"x":{"a":0,"k":0,"ix":4},"nm":"Mask 1"}],"w":1920,"h":1080,"ip":0,"op":111,"st":0,"bm":0},{"ddd":0,"ind":20,"ty":4,"nm":"Book Cover","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[835.17,577.195,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":508,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,0,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":0,"k":0,"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":0,"k":0,"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":1,"k":[{"i":{"x":[0.12],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[-25]},{"t":89,"s":[-90]}],"ix":14}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[25]},{"t":65,"s":[180]}],"ix":15}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":1,"k":[{"i":{"x":[0.12],"y":[1]},"o":{"x":[0.44],"y":[0]},"t":45,"s":[0]},{"t":89,"s":[180]}],"ix":16}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":1,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0,1,0.98431372549,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":0,"k":0,"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[0.477340400219,0.263591557741,0,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0,0.235294117647,1,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":100,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[0,0],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[0,0],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.23137254902,0.529411764706,0.192156862745,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":25,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[0,0,0,1],"ix":51}},{"ty":7,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":100,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":0,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[0],\n        front_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[2],\n        front_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[4],\n        front_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[6],\n        front_bb[7]\n    ];\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":0,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[0],\n        back_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[2],\n        back_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[4],\n        back_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[6],\n        back_bb[7]\n    ];\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.0]","np":3,"mn":"ADBE Layer Control","ix":2,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":2,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.1]","np":3,"mn":"ADBE Layer Control","ix":3,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":3,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.2]","np":3,"mn":"ADBE Layer Control","ix":4,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":4,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.3]","np":3,"mn":"ADBE Layer Control","ix":5,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":5,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.4]","np":3,"mn":"ADBE Layer Control","ix":6,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":6,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.5]","np":3,"mn":"ADBE Layer Control","ix":7,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":7,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.6]","np":3,"mn":"ADBE Layer Control","ix":8,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":8,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.7]","np":3,"mn":"ADBE Layer Control","ix":9,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":9,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.8]","np":3,"mn":"ADBE Layer Control","ix":10,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":10,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.9]","np":3,"mn":"ADBE Layer Control","ix":11,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":11,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.10]","np":3,"mn":"ADBE Layer Control","ix":12,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":12,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.11]","np":3,"mn":"ADBE Layer Control","ix":13,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":13,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.12]","np":3,"mn":"ADBE Layer Control","ix":14,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":14,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.13]","np":3,"mn":"ADBE Layer Control","ix":15,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":15,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.14]","np":3,"mn":"ADBE Layer Control","ix":16,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":16,"ix":1}}]},{"ty":5,"nm":"Shape Layer 1: Path 1 [1.1.15]","np":3,"mn":"ADBE Layer Control","ix":17,"en":1,"ef":[{"ty":10,"nm":"Layer","mn":"ADBE Layer Control-0001","ix":1,"v":{"a":0,"k":17,"ix":1}}]},{"ty":5,"nm":"FACE 0","np":3,"mn":"ADBE Color Control","ix":18,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.487769037485,0.29482370615,0.022863360122,1],"ix":1}}]},{"ty":5,"nm":"FACE 1","np":3,"mn":"ADBE Color Control","ix":19,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.320644617081,0.194730654359,0.017252365127,1],"ix":1}}]},{"ty":5,"nm":"FACE 2","np":3,"mn":"ADBE Color Control","ix":20,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.25,0.165584415197,0.048701297492,1],"ix":1}}]},{"ty":5,"nm":"FACE 3","np":3,"mn":"ADBE Color Control","ix":21,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.20000000298,0.132467538118,0.038961037993,1],"ix":1}}]},{"ty":5,"nm":"FACE 4","np":3,"mn":"ADBE Color Control","ix":22,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.15000000596,0.099343813956,0.029207997024,1],"ix":1}}]},{"ty":5,"nm":"FACE 5","np":3,"mn":"ADBE Color Control","ix":23,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.20000000298,0.132467538118,0.038961037993,1],"ix":1}}]},{"ty":5,"nm":"FACE 6","np":3,"mn":"ADBE Color Control","ix":24,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.25,0.165584415197,0.048701297492,1],"ix":1}}]},{"ty":5,"nm":"FACE 7","np":3,"mn":"ADBE Color Control","ix":25,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.320644617081,0.194730654359,0.017252365127,1],"ix":1}}]},{"ty":5,"nm":"FACE 8","np":3,"mn":"ADBE Color Control","ix":26,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.477325439453,0.263580322266,0,1],"ix":1}}]},{"ty":5,"nm":"FACE 9","np":3,"mn":"ADBE Color Control","ix":27,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.658823549747,0.423529416323,0.141176477075,1],"ix":1}}]},{"ty":5,"nm":"FACE 10","np":3,"mn":"ADBE Color Control","ix":28,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.589999973774,0.346007943153,0.002071954077,1],"ix":1}}]},{"ty":5,"nm":"FACE 11","np":3,"mn":"ADBE Color Control","ix":29,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.72000002861,0.422246992588,0.002528486308,1],"ix":1}}]},{"ty":5,"nm":"FACE 12","np":3,"mn":"ADBE Color Control","ix":30,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.785009264946,0.460371941328,0.002756784903,1],"ix":1}}]},{"ty":5,"nm":"FACE 13","np":3,"mn":"ADBE Color Control","ix":31,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.850000023842,0.49847599864,0.002983138897,1],"ix":1}}]},{"ty":5,"nm":"FACE 14","np":3,"mn":"ADBE Color Control","ix":32,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":17,"s":[0.800000011921,0.469167143106,0.002800997812,1]},{"t":25,"s":[0.629999995232,0.369469106197,0.00220578583,1]}],"ix":1}}]},{"ty":5,"nm":"FACE 15","np":3,"mn":"ADBE Color Control","ix":33,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":17,"s":[0.697323560715,0.40894138813,0.002460863441,1]},{"t":25,"s":[0.600000023842,0.351866543293,0.002117407508,1]}],"ix":1}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[432.188,-17.312],[432.188,1.062],[68.813,1],[48.25,17.312],[12.312,17.312],[-14.875,17.25],[-53.188,17.25],[-67.438,1.062],[-432.188,1.062],[-432.188,-17.312],[-51.312,-17.312],[-34.062,-0.562],[-13.438,-0.562],[10.188,-0.562],[34.25,-0.562],[53.438,-17.312]],"c":true},"ix":2,"x":"var $bm_rt;\nvar nullLayerNames = [\n    'Shape Layer 1: Path 1 [1.1.0]',\n    'Shape Layer 1: Path 1 [1.1.1]',\n    'Shape Layer 1: Path 1 [1.1.2]',\n    'Shape Layer 1: Path 1 [1.1.3]',\n    'Shape Layer 1: Path 1 [1.1.4]',\n    'Shape Layer 1: Path 1 [1.1.5]',\n    'Shape Layer 1: Path 1 [1.1.6]',\n    'Shape Layer 1: Path 1 [1.1.7]',\n    'Shape Layer 1: Path 1 [1.1.8]',\n    'Shape Layer 1: Path 1 [1.1.9]',\n    'Shape Layer 1: Path 1 [1.1.10]',\n    'Shape Layer 1: Path 1 [1.1.11]',\n    'Shape Layer 1: Path 1 [1.1.12]',\n    'Shape Layer 1: Path 1 [1.1.13]',\n    'Shape Layer 1: Path 1 [1.1.14]',\n    'Shape Layer 1: Path 1 [1.1.15]'\n];\nvar origPath = thisProperty;\nvar origPoints = origPath.points();\nvar origInTang = origPath.inTangents();\nvar origOutTang = origPath.outTangents();\nvar getNullLayers = [];\nfor (var i = 0, il = nullLayerNames.length; i < il; i++) {\n    try {\n        getNullLayers.push(effect(nullLayerNames[i])('ADBE Layer Control-0001'));\n    } catch (err) {\n        getNullLayers.push(null);\n    }\n}\nfor (var i = 0, il = getNullLayers.length; i < il; i++) {\n    if (getNullLayers[i] != null && getNullLayers[i].index != thisLayer.index) {\n        origPoints[i] = fromCompToSurface(getNullLayers[i].toComp(getNullLayers[i].anchorPoint));\n    }\n}\n$bm_rt = createPath(origPoints, origInTang, origOutTang, origPath.isClosed());"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[0.898010253906,0.576446533203,0.450958251953,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":10,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":true},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":true},{"ty":"gr","it":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[10,10],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isHidden = effect('Extrudalizer')('Hide anchor point').value;\n$bm_rt = $bm_mul(!isHidden, 100);"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ANCHOR POINT","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Front color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Front opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst is_facing_towards_us = extr_data.split(';')[8] === 'true';\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n    ;\n}\n;"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\n;\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Back color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Back opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    try {\n        const frontOpacity = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity.value;\n        $bm_rt = value = $bm_sub(100, frontOpacity);\n    } catch (e) {\n        $bm_rt = 100;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 0;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 0;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 1;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 1;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 2;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 2;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 3;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 3;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 4","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 4;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 4;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 4;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 4 - 5","np":3,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 5;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 5;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 5;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 5 - 6","np":3,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 6;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 6;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 6;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 6 - 7","np":3,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 7;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 7;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 7;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 7 - 8","np":3,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 8;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 8;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 8;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 8 - 9","np":3,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 9;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 9;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 9;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 9 - 10","np":3,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 10;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 10;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 10;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 10 - 11","np":3,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 11;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 11;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 11;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 11 - 12","np":3,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 12;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 12;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 12;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 12 - 13","np":3,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 13;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 13;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 13;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 13 - 14","np":3,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 14;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 14;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 14;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 14 - 15","np":3,"cix":2,"bm":0,"ix":15,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 15;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 15;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Book Corver').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 15;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 15 - 0","np":3,"cix":2,"bm":0,"ix":16,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":16,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":123,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":21,"ty":5,"nm":"EXTRUDALIZER DATA Book Corver","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,541,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":150,"f":"RNSSanzSC-Bold","t":"","ca":1,"j":0,"tr":40,"lh":180,"ls":0,"fc":[1,1,1]},"t":0}],"x":"var $bm_rt;\nvar dot_, cross_vec, len_vec, arraysEqual, getNormal, get2D_projection, getBoundingBox, getPositionMatrix, getRotationMatrix, getScaleMatrix, getIdentity, translate, rotateX, rotateY, rotateZ, multiplyMatrixVector, multiplyMatrices, multiplyArrayOfMatrices, transformMatrix, make_transform, getPoint, getArea, isClockwise, getCenter, hasNoneZeroValues, angle_between, angle_between_cw, isStraightLine_w_delta, isFacingTowardsUs, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_shape_matrix, compare_sides, stringify;\ndot_ = function (a, b) {\n    if (a.length == 2) {\n        return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n    } else {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    }\n};\ncross_vec = function (a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\narraysEqual = function (arr1, arr2) {\n    for (var i = 0, il = arr1.length; i < il; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\ngetNormal = function (pts) {\n    const dir = cross_vec(sub(pts[1], pts[0]), sub(pts[2], pts[0]));\n    return dir;\n};\nget2D_projection = function (points) {\n    return points.map(v => [\n        v[0],\n        v[1]\n    ]);\n};\ngetBoundingBox = function (points) {\n    const boundingBox = {\n        left: Number.POSITIVE_INFINITY,\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        width: undefined,\n        height: undefined,\n        center: undefined\n    };\n    points.forEach(point => {\n        boundingBox.left = Math.min(boundingBox.left, point[0]);\n        boundingBox.top = Math.min(boundingBox.top, point[1]);\n        boundingBox.right = Math.max(boundingBox.right, point[0]);\n        boundingBox.bottom = Math.max(boundingBox.bottom, point[1]);\n    });\n    boundingBox.width = $bm_sub(boundingBox.right, boundingBox.left);\n    boundingBox.height = $bm_sub(boundingBox.bottom, boundingBox.top);\n    boundingBox.center = [\n        $bm_sum(boundingBox.left, $bm_div(boundingBox.width, 2)),\n        $bm_sum(boundingBox.top, $bm_div(boundingBox.height, 2))\n    ];\n    boundingBox.left_top = [\n        boundingBox.left,\n        boundingBox.top\n    ];\n    boundingBox.left_bottom = [\n        boundingBox.left,\n        boundingBox.bottom\n    ];\n    boundingBox.right_top = [\n        boundingBox.right,\n        boundingBox.top\n    ];\n    boundingBox.right_bottom = [\n        boundingBox.right,\n        boundingBox.bottom\n    ];\n    return boundingBox;\n};\ngetPositionMatrix = function (value) {\n    return translate(getIdentity(), value[0], value[1], $bm_neg(value[2]));\n};\ngetRotationMatrix = function (angles) {\n    const angleX = angles[0];\n    const angleY = angles[1];\n    const angleZ = angles[2];\n    var matrix = getIdentity();\n    matrix = rotateZ(matrix, $bm_div($bm_mul(angleZ, Math.PI), 180));\n    matrix = rotateY(matrix, $bm_div($bm_mul(angleY, Math.PI), 180));\n    matrix = rotateX(matrix, $bm_div($bm_mul(angleX, Math.PI), 180));\n    return matrix;\n};\ngetScaleMatrix = function (sc) {\n    return [\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ngetIdentity = function () {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ntranslate = function (matrix, x, y, z) {\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        x,\n        0,\n        1,\n        0,\n        y,\n        0,\n        0,\n        1,\n        z,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateX = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateY = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        0,\n        sin_th,\n        0,\n        0,\n        1,\n        0,\n        0,\n        $bm_neg(sin_th),\n        0,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateZ = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nmultiplyMatrixVector = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 4; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 4; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 4), j)], vector[j]));\n        }\n    }\n    return result;\n};\nmultiplyMatrices = function (matrixB, matrixA) {\n    let result = new Array(16).fill(0);\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            for (let k = 0; k < 4; k++) {\n                result[$bm_sum($bm_mul(i, 4), j)] = $bm_sum(result[$bm_sum($bm_mul(i, 4), j)], $bm_mul(matrixA[$bm_sum($bm_mul(i, 4), k)], matrixB[$bm_sum($bm_mul(k, 4), j)]));\n            }\n        }\n    }\n    return result;\n};\nmultiplyArrayOfMatrices = function (matrices) {\n    var result = matrices[0];\n    for (var i = 1, il = matrices.length; i < il; i++) {\n        result = multiplyMatrices(result, matrices[i]);\n    }\n    return result;\n};\ntransformMatrix = function (move, sc, pivot, pitch_angles, anch, orbit_angles) {\n    var mat_array = [];\n    if (sc !== 1) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getScaleMatrix(sc),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getScaleMatrix(sc));\n        }\n    }\n    mat_array.push(getPositionMatrix(move));\n    if (!arraysEqual(pitch_angles, [\n            0,\n            0,\n            0\n        ])) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getRotationMatrix(pitch_angles),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getRotationMatrix(pitch_angles));\n        }\n    }\n    if (!arraysEqual(anch, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getPositionMatrix(anch.map(i => -i)));\n    }\n    if (!arraysEqual(orbit_angles, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getRotationMatrix(orbit_angles));\n    }\n    return multiplyArrayOfMatrices(mat_array);\n};\nmake_transform = function (transform_matrix, vector) {\n    if (vector.length == 2) {\n        vector = [\n            ...vector,\n            0,\n            1\n        ];\n    } else if (vector.length == 3) {\n        vector = [\n            ...vector,\n            1\n        ];\n    }\n    var result_vector_4d = multiplyMatrixVector(transform_matrix, vector);\n    return result_vector_4d.slice(0, 3);\n};\ngetPoint = function (p1, cp1, cp2, p2, t) {\n    const x = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[0]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[0])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[0])), $bm_mul(Math.pow(t, 3), p2[0]));\n    const y = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[1]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[1])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[1])), $bm_mul(Math.pow(t, 3), p2[1]));\n    return [\n        x,\n        y\n    ];\n};\ngetArea = function (points) {\n    var area = 0;\n    for (var i = 0, il = points.length; i < il; i++) {\n        var p1 = points[i];\n        var p2 = points[(i + 1) % il];\n        area = $bm_sum(area, $bm_sub($bm_mul(p1[0], p2[1]), $bm_mul(p2[0], p1[1])));\n    }\n    return $bm_div(area, 2);\n};\nisClockwise = function (points) {\n    return getArea(points) > 0;\n};\ngetCenter = function (pts) {\n    var cp = [\n        0,\n        0\n    ];\n    const num_pts = pts.length;\n    for (var i = 0; i < num_pts; i++) {\n        cp = add(cp, pts[i]);\n    }\n    cp = div(cp, num_pts);\n    return cp;\n};\nhasNoneZeroValues = function (array2D) {\n    return array2D.some(array => array.some(value => value !== 0));\n};\nangle_between = function (a, b) {\n    const dot_prod = dot_(a, b);\n    const mag_a = len_vec(a);\n    const mag_b = len_vec(b);\n    const cos_ = $bm_div(dot_prod, $bm_mul(mag_a, mag_b));\n    return cos_;\n};\nangle_between_cw = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    angle = angle >= 0 ? angle : $bm_sum($bm_mul(2, Math.PI), angle);\n    const degrees = $bm_mul(angle, $bm_div(180, Math.PI));\n    return degrees;\n};\nisStraightLine_w_delta = function (cp1, cp2, delta) {\n    return angle_between(cp1, cp2) <= -delta;\n};\nisFacingTowardsUs = function (p1, p2) {\n    return dot_(sub(p2, p1), [\n        0,\n        0,\n        1\n    ]) > 0;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n    ;\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_shape_matrix = function (anchor, pos, scale, rot, skew, skew_axis) {\n    let mat_array = [];\n    if (anchor[0] !== 0 || anchor[1] !== 0) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    ;\n    if (scale[0] !== 100 || scale[1] !== 100) {\n        const S = [\n            scale[0] / 100,\n            0,\n            0,\n            0,\n            scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    ;\n    if (skew !== 0) {\n        const sk_angle = $bm_div($bm_mul(skew, Math.PI), 180);\n        const Sk = [\n            1,\n            Math.tan(-sk_angle),\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            1\n        ];\n        if (skew_axis !== 0) {\n            const sk_axis_angle = $bm_div($bm_mul(skew_axis, Math.PI), 180);\n            const Rz = [\n                Math.cos(sk_axis_angle),\n                -Math.sin(sk_axis_angle),\n                0,\n                Math.sin(sk_axis_angle),\n                Math.cos(sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const Rz_inv = [\n                Math.cos(-sk_axis_angle),\n                -Math.sin(-sk_axis_angle),\n                0,\n                Math.sin(-sk_axis_angle),\n                Math.cos(-sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const SkM = multiplyArrayOfMatrices3x3([\n                Rz_inv,\n                Sk,\n                Rz\n            ]);\n            mat_array.push(SkM);\n        } else {\n            mat_array.push(Sk);\n        }\n        ;\n    }\n    ;\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const R = [\n            Math.cos(theta),\n            -Math.sin(theta),\n            0,\n            Math.sin(theta),\n            Math.cos(theta),\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    ;\n    if (pos[0] !== 0 || pos[1] !== 0) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    ;\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nconst shape_layer = thisComp.layer('Book Cover');\nconst shape = shape_layer(2)(1);\nconst shape_contents = shape(2);\nconst targetPath = shape_contents(1)(2);\nconst is_path_closed = targetPath.isClosed();\nconst extrudalizer = shape_layer('ADBE Effect Parade')('Pseudo/Extrudalizer');\nconst depth = extrudalizer('Extrusion depth').value;\nlet anchor = extrudalizer('Position').value;\nanchor = [\n    $bm_neg(anchor[0]),\n    anchor[1],\n    anchor[2]\n];\nconst angleX = extrudalizer('X Rotation').value;\nconst angleY = extrudalizer('Y Rotation').value;\nconst angleZ = extrudalizer('Z Rotation').value;\nconst pivot_angleX = extrudalizer('Pitch (x)').value;\nconst pivot_angleY = extrudalizer('Yaw (y)').value;\nconst pivot_angleZ = extrudalizer('Roll (z)').value;\nconst scale_front = $bm_div(extrudalizer('Front scale').value, 100);\nconst scale_back = $bm_div(extrudalizer('Back scale').value, 100);\nconst use_bb_front = extrudalizer('Compute 3D front bounding box').value;\nconst use_bb_back = extrudalizer('Compute 3D back bounding box').value;\nlet pnts = targetPath.points();\nlet inTangents = targetPath.inTangents();\nlet outTangents = targetPath.outTangents();\nconst is_front_clockwise = isClockwise(pnts);\nconst shape_transform = shape.transform;\nconst s_anchor = shape_transform.anchorPoint;\nconst s_pos = shape_transform.position;\nconst s_scale = shape_transform.scale;\nconst s_rot = shape_transform.rotation;\nconst s_skew = shape_transform.skew;\nconst s_skew_axis = shape_transform.skewAxis;\nconst shape_transform_matrix = get_transform_shape_matrix(s_anchor, s_pos, s_scale, s_rot, s_skew, s_skew_axis);\nconst layer_transform = shape_layer.transform;\nconst l_anchor = layer_transform.anchorPoint;\nconst l_pos = layer_transform.position;\nconst l_scale = layer_transform.scale;\nconst l_rot = layer_transform.rotation;\nconst layer_transform_matrix = get_transform_shape_matrix(l_anchor, l_pos, l_scale, l_rot, 0, 0);\nlet subdivs = 1;\nif (hasNoneZeroValues(inTangents) || hasNoneZeroValues(outTangents)) {\n    subdivs = 5;\n    let pointsF = [];\n    const num_pnts = pnts.length;\n    for (var i = 0; i < num_pnts; i++) {\n        var p1 = pnts[i], p2 = pnts[(i + 1) % num_pnts];\n        var out1 = outTangents[i], in2 = inTangents[(i + 1) % num_pnts];\n        var cp1 = add(p1, out1), cp2 = add(p2, in2);\n        pointsF.push(pnts[i]);\n        if (len_vec(out1) !== 0 || len_vec(in2) !== 0) {\n            var a = len_vec(out1) === 0 ? sub(p2, p1) : out1;\n            var b = len_vec(in2) === 0 ? sub(p1, p2) : in2;\n            if (!isStraightLine_w_delta(a, b, 0.98)) {\n                for (var j = 1; j < subdivs; j++) {\n                    var t = $bm_div(j, subdivs);\n                    pointsF.push(getPoint(p1, cp1, cp2, p2, t));\n                }\n            }\n        }\n    }\n    pnts = pointsF;\n}\npnts = pnts.map(p => transform2D_apply(shape_transform_matrix, p));\nconst num_pts = pnts.length;\nconst zero_center_point = getCenter(pnts);\nconst zero_center_point_3D = [\n    ...zero_center_point,\n    0\n];\nconst tr_front_mat = transformMatrix([\n    0,\n    0,\n    $bm_div($bm_neg(depth), 2)\n], scale_front, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst tr_back_mat = transformMatrix([\n    0,\n    0,\n    $bm_div(depth, 2)\n], scale_back, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst z0_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    0\n]);\nconst z1_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    1\n]);\nconst front_facing_towards_us = isFacingTowardsUs(z0_transformed, z1_transformed);\nlet points_front_3D = pnts.map(pnt => make_transform(tr_front_mat, pnt));\nlet points_back_3D = pnts.map(pnt => make_transform(tr_back_mat, pnt));\nlet winding_sides = [];\nlet sorted_sides = [];\nlet num_sides_towards_us = 0;\nfor (var i = 0; i < num_pts; i++) {\n    if (!is_path_closed && i == num_pts - 1) {\n        break;\n    }\n    var F1 = points_front_3D[i], F2 = points_front_3D[(i + 1) % num_pts];\n    var B1 = points_back_3D[i], B2 = points_back_3D[(i + 1) % num_pts];\n    var side_normal = getNormal([\n        F2,\n        F1,\n        B1\n    ]);\n    if (!is_front_clockwise) {\n        side_normal = mul(side_normal, -1);\n    }\n    const sideIsFacingUs = isFacingTowardsUs([\n        0,\n        0,\n        0\n    ], side_normal);\n    if (sideIsFacingUs) {\n        num_sides_towards_us++;\n    }\n    winding_sides.push(sideIsFacingUs);\n    let side_sorted = [\n        F2,\n        F1,\n        B1,\n        B2\n    ];\n    side_sorted.sort((a, b) => b[2] - a[2]);\n    sorted_sides.push([\n        side_sorted,\n        i,\n        $bm_mod($bm_sum(i, 1), num_pts)\n    ]);\n}\ncompare_sides = function (side1, side2) {\n    const s1_vertices_z = side1[0].map(v => v[2]), s2_vertices_z = side2[0].map(v => v[2]);\n    for (var i = 0, il = side1[0].length; i < il; i++) {\n        if (s1_vertices_z[i] != s2_vertices_z[i]) {\n            return $bm_sub(s2_vertices_z[i], s1_vertices_z[i]);\n        }\n    }\n};\nsorted_sides.sort((a, b) => compare_sides(a, b));\nsorted_sides = sorted_sides.map(p => [\n    p[1],\n    p[2]\n]);\nsorted_sides.sort(function (a, b) {\n    const fa = winding_sides[a[0]], fb = winding_sides[b[0]];\n    if (fa && !fb) {\n        return -1;\n    } else if (!fa && fb) {\n        return 1;\n    } else {\n        return 0;\n    }\n    ;\n});\nconst vec_between_front_back = sub(points_front_3D[0], points_back_3D[0]);\nlet bb_front_2D = [], bb_back_2D = [], bb_front_transforms = [], bb_back_transforms = [];\nif (use_bb_back || use_bb_front) {\n    const bb = getBoundingBox(pnts);\n    const AB = sub(bb.right_top, bb.left_top);\n    const AD = sub(bb.left_bottom, bb.left_top);\n    const scaleX_coeff = front_facing_towards_us ? 100 : -100;\n    const scaleY_coeff = 100;\n    if (use_bb_front) {\n        const bb_front_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_front_mat, pnt));\n        bb_front_2D = get2D_projection(bb_front_3D);\n        bb_front_2D.push(add(bb_front_2D[2], sub(bb_front_2D[1], bb_front_2D[0])));\n        const ex_front_left_top = bb_front_2D[0], ex_front_right_top = bb_front_2D[1], ex_front_left_bottom = bb_front_2D[2];\n        const front_bb_anchor = bb.left_top;\n        const front_bb_pos = ex_front_left_top;\n        const ex_front_AB = sub(ex_front_right_top, ex_front_left_top);\n        let front_bb_theta = angle_between_cw(AB, ex_front_AB);\n        if (!front_facing_towards_us) {\n            front_bb_theta = $bm_sub(front_bb_theta, 180);\n        }\n        const front_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_front_AB)), len_vec(AB));\n        const ex_front_AD = sub(ex_front_left_bottom, ex_front_left_top);\n        const front_bb_th_rad = $bm_mul(front_bb_theta, $bm_div(Math.PI, 180));\n        const front_AD_rot = [\n            AD[0] * Math.cos(front_bb_th_rad) - AD[1] * Math.sin(front_bb_th_rad),\n            AD[0] * Math.sin(front_bb_th_rad) + AD[1] * Math.cos(front_bb_th_rad)\n        ];\n        let front_bb_sk = angle_between_cw(front_AD_rot, ex_front_AD);\n        front_bb_sk = front_bb_sk < 90 ? front_bb_sk : $bm_sub(front_bb_sk, 360);\n        const front_sk_rad = $bm_div($bm_mul(front_bb_sk, Math.PI), 180);\n        const front_AD_skew = [\n            AD[0] + Math.tan(-front_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const front_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_front_AD)), len_vec(front_AD_skew));\n        bb_front_transforms = [\n            front_bb_anchor,\n            front_bb_pos,\n            front_bb_theta,\n            [\n                front_bb_scx,\n                front_bb_scy\n            ],\n            front_bb_sk\n        ];\n        bb_front_2D = bb_front_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n    if (use_bb_back) {\n        const bb_back_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_back_mat, pnt));\n        bb_back_2D = get2D_projection(bb_back_3D);\n        bb_back_2D.push(add(bb_back_2D[2], sub(bb_back_2D[1], bb_back_2D[0])));\n        const ex_back_left_top = bb_back_2D[0], ex_back_right_top = bb_back_2D[1], ex_back_left_bottom = bb_back_2D[2];\n        const back_bb_anchor = bb.left_top;\n        const back_bb_pos = ex_back_left_top;\n        const ex_back_AB = sub(ex_back_right_top, ex_back_left_top);\n        let back_bb_theta = $bm_sub(angle_between_cw(AB, ex_back_AB), 180);\n        if (front_facing_towards_us) {\n            back_bb_theta = $bm_sum(back_bb_theta, 180);\n        }\n        const back_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_back_AB)), len_vec(AB));\n        const ex_back_AD = sub(ex_back_left_bottom, ex_back_left_top);\n        const back_bb_th_rad = $bm_mul(back_bb_theta, $bm_div(Math.PI, 180));\n        const back_AD_rot = [\n            AD[0] * Math.cos(back_bb_th_rad) - AD[1] * Math.sin(back_bb_th_rad),\n            AD[0] * Math.sin(back_bb_th_rad) + AD[1] * Math.cos(back_bb_th_rad)\n        ];\n        let back_bb_sk = angle_between_cw(back_AD_rot, ex_back_AD);\n        back_bb_sk = back_bb_sk < 90 ? back_bb_sk : $bm_sub(back_bb_sk, 360);\n        const back_sk_rad = $bm_div($bm_mul(back_bb_sk, Math.PI), 180);\n        const back_AD_skew = [\n            AD[0] + Math.tan(-back_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const back_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_back_AD)), len_vec(back_AD_skew));\n        bb_back_transforms = [\n            back_bb_anchor,\n            back_bb_pos,\n            back_bb_theta,\n            [\n                back_bb_scx,\n                back_bb_scy\n            ],\n            back_bb_sk\n        ];\n        bb_back_2D = bb_back_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n}\nlet grad_property = null;\ntry {\n    grad_property = shape_contents('ADBE Vector Graphic - G-Fill');\n} catch (e) {\n}\n;\nvar grad_start_front_new = '';\nvar grad_end_front_new = '';\nvar grad_start_back_new = '';\nvar grad_end_back_new = '';\nif (grad_property != null) {\n    let grad_start = grad_property.startPoint.value;\n    let grad_end = grad_property.endPoint.value;\n    grad_start = transform2D_apply(shape_transform_matrix, grad_start);\n    grad_end = transform2D_apply(shape_transform_matrix, grad_end);\n    const grad_start_front = make_transform(tr_front_mat, grad_start);\n    const grad_end_front = make_transform(tr_front_mat, grad_end);\n    const grad_start_back = make_transform(tr_back_mat, grad_start);\n    const grad_end_back = make_transform(tr_back_mat, grad_end);\n    grad_start_front_new = grad_start_front;\n    grad_end_front_new = grad_end_front;\n    grad_start_back_new = grad_start_back;\n    grad_end_back_new = grad_end_back;\n    const grad_front_rot = $bm_div($bm_mul(extrudalizer('Front gradient direction').value, Math.PI), 180);\n    const grad_back_rot = $bm_div($bm_mul(extrudalizer('Back gradient direction').value, Math.PI), 180);\n    if (!arraysEqual([\n            grad_front_rot,\n            grad_back_rot\n        ], [\n            0,\n            0\n        ])) {\n        const grad_origin_front = div(add(grad_end_front, grad_start_front), 2);\n        const grad_origin_back = div(add(grad_end_back, grad_start_back), 2);\n        const grad_p_st_front = sub(grad_start_front, grad_origin_front);\n        const grad_p_end_front = sub(grad_end_front, grad_origin_front);\n        const grad_p_st_back = sub(grad_start_back, grad_origin_back);\n        const grad_p_end_back = sub(grad_end_back, grad_origin_back);\n        if (grad_front_rot != 0) {\n            const cos_st = Math.cos(grad_front_rot), sin_st = Math.sin(grad_front_rot);\n            grad_start_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_st_front[0]), $bm_mul(sin_st, grad_p_st_front[1])), grad_origin_front[0]);\n            grad_start_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_st_front[0]), $bm_mul(cos_st, grad_p_st_front[1])), grad_origin_front[1]);\n            grad_end_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_end_front[0]), $bm_mul(sin_st, grad_p_end_front[1])), grad_origin_front[0]);\n            grad_end_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_end_front[0]), $bm_mul(cos_st, grad_p_end_front[1])), grad_origin_front[1]);\n        }\n        if (grad_back_rot != 0) {\n            const cos_st_b = Math.cos(grad_back_rot), sin_st_b = Math.sin(grad_back_rot);\n            grad_start_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_st_back[0]), $bm_mul(sin_st_b, grad_p_st_back[1])), grad_origin_back[0]);\n            grad_start_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_st_back[0]), $bm_mul(cos_st_b, grad_p_st_back[1])), grad_origin_back[1]);\n            grad_end_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_end_back[0]), $bm_mul(sin_st_b, grad_p_end_back[1])), grad_origin_back[0]);\n            grad_end_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_end_back[0]), $bm_mul(cos_st_b, grad_p_end_back[1])), grad_origin_back[1]);\n        }\n    }\n}\nstringify = function (data, separator) {\n    return data.map(item => Array.isArray(item) ? item.join(',') : item.toString()).join(separator);\n};\nconst extr_data = [\n    tr_front_mat,\n    tr_back_mat,\n    shape_transform_matrix,\n    subdivs,\n    is_path_closed,\n    points_front_3D,\n    points_back_3D,\n    sorted_sides,\n    front_facing_towards_us,\n    num_sides_towards_us,\n    vec_between_front_back,\n    bb_front_2D,\n    bb_back_2D,\n    bb_front_transforms,\n    bb_back_transforms,\n    grad_start_front_new,\n    grad_end_front_new,\n    grad_start_back_new,\n    grad_end_back_new\n];\nvar txt = stringify(extr_data, ';');\n$bm_rt = txt;"},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":123,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":22,"ty":5,"nm":"EXTRUDALIZER DATA Page1","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,540,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":150,"f":"RNSSanzSC-Bold","t":"","ca":1,"j":0,"tr":40,"lh":180,"ls":0,"fc":[1,1,1]},"t":0}]},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":89,"st":0,"ct":1,"bm":0}],"markers":[],"props":{}}